
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module ddr3_test(

	//////////// CLOCK //////////
//	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// KEY //////////
//	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SDRAM //////////
	output		    [14:0]		DDR3_A,
	output		     [2:0]		DDR3_BA,
	output		          		DDR3_CAS_n,
	inout 		          		DDR3_CK_n,
	inout 		          		DDR3_CK_p,
	output		          		DDR3_CKE,
	input 		          		DDR3_CLK_50,
	output		          		DDR3_CS_n,
	output		     [1:0]		DDR3_DM,
	inout 		    [15:0]		DDR3_DQ,
	inout 		     [1:0]		DDR3_DQS_n,
	inout 		     [1:0]		DDR3_DQS_p,
	output		          		DDR3_ODT,
	output		          		DDR3_RAS_n,
	output		          		DDR3_RESET_n,
	output		          		DDR3_WE_n
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [9:0] por_counter = 1023;
always @ (posedge DDR3_CLK_50) begin
 if (por_counter) begin
 por_counter <= por_counter - 1 ;
 end
end

wire resetn = (por_counter == 0);



//=======================================================
//  Structural coding
//=======================================================
////////////////////////////////////ddr3 uniphy//////////////////////////////////////////////////
wire afi_clk;
wire avl_ready;
wire avl_burstbegin;
wire [25:0] avl_addr;
wire        avl_rdata_valid; 
wire [63:0] avl_rdata;
wire [63:0] avl_wdata;
wire [7:0]  avl_be;
wire        avl_read_req;
wire        avl_write_req;
wire [2:0]  avl_size;
wire        local_init_done;
wire        local_cal_success;
wire        local_cal_fail;
wire        pll_mem_clk;
wire        pll_write_clk;
wire        pll_locked;
wire        pll_capture0_clk;
wire        pll_capture1_clk;
myddr3l myddr3l_inst(
							.pll_ref_clk(DDR3_CLK_50),        //      pll_ref_clk.clk
							.global_reset_n(resetn),     //     global_reset.reset_n
							.soft_reset_n(resetn),       //       soft_reset.reset_n
							.afi_clk(afi_clk),            //          afi_clk.clk
							.afi_half_clk(),       //     afi_half_clk.clk
							.afi_reset_n(afi_reset_n),        //        afi_reset.reset_n
							.afi_reset_export_n(), // afi_reset_export.reset_n
							.mem_a(DDR3_A),              //           memory.mem_a
							.mem_ba(DDR3_BA),             //                 .mem_ba
							.mem_ck(DDR3_CK_p),             //                 .mem_ck
							.mem_ck_n(DDR3_CK_n),           //                 .mem_ck_n
							.mem_cke(DDR3_CKE),            //                 .mem_cke
							.mem_cs_n(DDR3_CS_n),           //                 .mem_cs_n
							.mem_dm(DDR3_DM),             //                 .mem_dm
							.mem_ras_n(DDR3_RAS_n),          //                 .mem_ras_n
							.mem_cas_n(DDR3_CAS_n),          //                 .mem_cas_n
							.mem_we_n(DDR3_WE_n),           //                 .mem_we_n
							.mem_reset_n(DDR3_RESET_n),        //                 .mem_reset_n
							.mem_dq(DDR3_DQ),             //                 .mem_dq
							.mem_dqs(DDR3_DQS_p),            //                 .mem_dqs
							.mem_dqs_n(DDR3_DQS_n),          //                 .mem_dqs_n
							.mem_odt(DDR3_ODT),            //                 .mem_odt
							
							.avl_ready(avl_ready),          //              avl.waitrequest_n
							.avl_burstbegin(avl_burstbegin),     //                 .beginbursttransfer
							.avl_addr(avl_addr),           //                 .address
							.avl_rdata_valid(avl_rdata_valid),    //                 .readdatavalid
							.avl_rdata(avl_rdata),          //                 .readdata
							.avl_wdata(avl_wdata),          //                 .writedata
							.avl_be(avl_be),             //                 .byteenable
							.avl_read_req(avl_read_req),       //                 .read
							.avl_write_req(avl_write_req),      //                 .write
							.avl_size(avl_size),           //                 .burstcount
							.local_init_done(local_init_done),    //           status.local_init_done
							.local_cal_success(local_cal_success),  //                 .local_cal_success
							.local_cal_fail(local_cal_fail),     //                 .local_cal_fail
							.pll_mem_clk(pll_mem_clk),        //      pll_sharing.pll_mem_clk
							.pll_write_clk(pll_write_clk),      //                 .pll_write_clk
							.pll_locked(pll_locked),         //                 .pll_locked
							.pll_capture0_clk(pll_capture0_clk),   //                 .pll_capture0_clk
							.pll_capture1_clk(pll_capture1_clk)    //                 .pll_capture1_clk
					);
wire act_sucess;
wr_rd wr_rd_inst(.afi_clk(afi_clk),
						.rstn(afi_reset_n),
						.data(),
				 
						.avl_ready(avl_ready),          //              avl.waitrequest_n
						.avl_burstbegin(avl_burstbegin),     //                 .beginbursttransfer
						.avl_addr(avl_addr),           //                 .address
				 
						.avl_rdata_valid(avl_rdata_valid),    //                 .readdatavalid
						.avl_rdata(avl_rdata),          //                 .readdata
				 
						.avl_wdata(avl_wdata),          //                 .writedata
						.avl_be(avl_be),             //                 .byteenable
						.avl_read_req(avl_read_req),       //                 .read
						.avl_write_req(avl_write_req),      //                 .write
						.avl_size(avl_size),           //                 .burstcount
				 
						.local_init_done(local_init_done),    //           status.local_init_done
						.local_cal_success(local_cal_success),  //                 .local_cal_success
						.local_cal_fail(local_cal_fail),
						.act_sucess(act_sucess)
					);
assign LED[0] = ~act_sucess;
assign LED[7:1] = {6{act_sucess}}; 
endmodule
